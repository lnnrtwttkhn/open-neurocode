---
title: "open-neurocode"
format: 
  html:
    toc: true
    toc-depth: 2
    toc-title: Contents
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    link-external-newwindow: true
---

This website lists code and data repositories for publications of the [Max Planck Reseach Group NeuroCode](https://www.mpib-berlin.mpg.de/research/research-groups/mprg-neurocode) at the [Max Planck Institute for Human Development, Berlin](https://www.mpib-berlin.mpg.de/en).
The source repository can be found [on GitHub](https://github.com/lnnrtwttkhn/open-neurocode).

::: {.callout-warning}
## Please note that this website is still under construction! 🏗 🚧 👷‍♂️
The data and code might be incomplete or erroneous.
If you notice any errors or have suggestions for improvements, please either [open an issue](https://github.com/lnnrtwttkhn/open-neurocode/issues/new) or contact [Lennart Wittkuhn](mailto:wittkuhn@mpib-berlin.mpg.de).
You can also review the data and all of the source code in [this GitHub repository](https://github.com/lnnrtwttkhn/open-neurocode).
Thank you!
:::

```{r, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE, message = FALSE, warning = FALSE
)
library(magrittr)
library(data.table)
library(ggplot2)
library(viridis)
library(DT)
```

```{r}
data_path = Sys.glob(here::here("data", "data.csv"))
data = data.table::rbindlist(lapply(data_path, data.table::fread))
data_show = data %>%
  .[, paper_title := sprintf("<a href='%s' target='_blank'>%s</a>", paper_doi, paper_title)] %>%
  .[grepl( "github", repo), repo_label := "GitHub"] %>%
  .[grepl( "osf", repo), repo_label := "OSF"] %>%
  .[grepl( "n/a", repo), repo_label := "n/a"] %>%
  .[repo != "n/a", repo := sprintf("<a href='%s' target='_blank'>%s</a>", repo, repo_label)] %>%
  .[, c("paper_authors", "paper_year", "paper_title", "paper_journal", "repo", "category")] %>%
  setnames(., "paper_authors", "authors") %>%
  setnames(., "paper_year", "year") %>%
  setnames(., "paper_title", "title") %>%
  setnames(., "paper_journal", "journal") %>%
  data.table::setorder(., -year, authors)
```

## Overview

The table below gives an overview over all publications (sorted by year and author).
The listed papers have a least one author who is affiliated with the NeuroCode group.
In most cases, this is at least [the PI Nico Schuck](https://www.mpib-berlin.mpg.de/staff/nicolas-schuck).
Please note that this list might be incomplete.

```{r}
DT::datatable(
  data_show,
  class = "cell-border stripe", rownames = FALSE, escape = FALSE,
  options = list(
    scrollX = TRUE,
    pageLength = 10,
    lengthMenu = c(5, 10, 15, 20)
    ),
  ) 
```

## Repository content

What's inside the repositories?

Categories are: `code only`, `data only` and `code & data` (code and data are shared in one repository) or `n/a` (not applicable, i.e., no repository available).

The plot only includes papers that are (1) empirical (i.e., where empirical data has been collected and / or analyzed) and (2) published in a peer-reviewed journal (preprints are not included).

```{r, echo=TRUE}
dt_empirical_published = data %>%
  .[paper_type == "empirical" & paper_status == "journal article", ]
ggplot(dt_empirical_published, aes(x = category, fill = category, color = category)) +
  geom_bar(position = "dodge", stat = "count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -1) +
  ylab("Number") +
  xlab("Repository content") +
  theme(axis.line = element_line(color = "black")) +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank()) +
  theme(legend.position = "none") +
  scale_fill_viridis(option = "viridis", discrete = TRUE) +
  scale_color_viridis(option = "viridis", discrete = TRUE)
```

## Repository platform

Which platforms are used to share code and data?

As above, the plot only includes papers that are (1) empirical (i.e., where empirical data has been collected and / or analyzed) and (2) published in a peer-reviewed journal (i.e., preprints are not included).

```{r, echo=TRUE}
ggplot(dt_empirical_published, aes(x = repo_label, fill = repo_label, color = repo_label)) +
  geom_bar(position = "dodge", stat = "count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -1) +
  ylab("Number") +
  xlab("Repository platform") +
  theme(axis.line = element_line(color = "black")) +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank()) +
  theme(legend.position = "none") +
  scale_fill_viridis(option = "plasma", discrete = TRUE) +
  scale_color_viridis(option = "plasma", discrete = TRUE)
```

## Repository license

Which licenses are used when sharing code and data?

As above, the plot only includes papers that are (1) empirical (i.e., where empirical data has been collected and / or analyzed) and (2) published in a peer-reviewed journal (i.e., preprints are not included).

```{r, echo=TRUE}
ggplot(dt_empirical_published, aes(x = repo_license, fill = repo_license, color = repo_license)) +
  geom_bar(position = "dodge", stat = "count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -1) +
  ylab("Number") +
  xlab("License") +
  theme(axis.line = element_line(color = "black")) +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank()) +
  theme(legend.position = "none") +
  scale_fill_viridis(option = "plasma", discrete = TRUE) +
  scale_color_viridis(option = "plasma", discrete = TRUE)
```

## Open Access

How many papers are open access?

The plot involves all papers (including review articles and preprints).

```{r, echo=TRUE}
ggplot(data, aes(x = paper_oa, fill = paper_oa, color = paper_oa)) +
  geom_bar(position = "dodge", stat = "count") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -1) +
  ylab("Number") +
  xlab("Is the paper open access?") +
  theme(axis.line = element_line(color = "black")) +
  theme(panel.grid.major = element_blank()) +
  theme(panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank()) +
  theme(legend.position = "none") +
  scale_fill_viridis(option = "inferno", discrete = TRUE) +
  scale_color_viridis(option = "inferno", discrete = TRUE)
```
